import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import measurementPointService from '../reduxServices/measurementPointService';
import sizeRangeService from '../reduxServices/sizeRangeService';
import { measurementCreateWithSizeRangeAsync } from './measurementSlice';

interface SizeRangeState {
  sizeRanges: ISizeRange[];
  loading: boolean;
  error: string | null;
  message: string | null;
}

const initialState: SizeRangeState = {
  sizeRanges: [],
  loading: false,
  error: null,
  message: null
};

export const sizeRangeFetchAsync = createAsyncThunk(
  'sizerange/...',
  async (measurementId: string) => {
    var result = await sizeRangeService.fetchSizeRange(measurementId);
    return result;
  }
);

// export const sizeRangeCreateAsync = createAsyncThunk(
//   'sizerange/',
//   async (sizerange: ICreateSizeRange) => {
//     var result = await sizeRangeService.createSizeRange(sizerange);
//     return result;
//   }
// );

export const sizeRangeSlice = createSlice({
  name: 'sizerange',
  initialState,
  reducers: {
    sizeRangeMessages: (state) => {
      state.error = null;
      state.message = null;
    },
    // sizeRangeSortedByOrderIndex: (state) => {
    //   // ✅ Sort in Ascending order (low to high)
    //   console.log("Sortering av sizeRange, blir det rätt??");
    //   if (state.sizeRanges. > 1) state.measurementPoints.sort((a: IMeasurementPoint, b: IMeasurementPoint) => (a.shortName as any) - (b.shortName as any));
    // }
  },
  extraReducers: (builder) => {
    builder
      // FETCH ONE
      .addCase(sizeRangeFetchAsync.pending, state => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(sizeRangeFetchAsync.fulfilled, (state, action) => {

        //Load state.SizeRange by id. If new id, add. If excisting id, update.
        var index = state.sizeRanges.findIndex(x => x.id == action.payload.id);
        if (index != -1) {
          state.sizeRanges.splice(index, 1, action.payload);
        }
        else {
          console.log("Log: SizeRange push");
          state.sizeRanges.push(action.payload);
        }
        state.loading = false;
        state.error = null;
        state.message = null;
      })
      .addCase(sizeRangeFetchAsync.rejected, (state, action) => {
        state.loading = false;
        if (action.payload) {
          state.error = action.payload as string;
        } else {
          state.error = 'Failed to fetch sizeRange';
        }
        state.message = null;
      })
      // ACTION generated by another Slice
      .addCase(measurementCreateWithSizeRangeAsync.fulfilled, (state, action) => {
        if (action.payload.sizeRange) {
          state.sizeRanges.push(action.payload.sizeRange);
          state.loading = true;
        }
        state.loading = false;
        state.error = null;
        state.message = null;
      });
    // // CREATE one
    // .addCase(sizeRangeCreateAsync.pending, state => {
    //   state.loading = true;
    //   state.error = null;
    //   state.message = null;
    // })
    // .addCase(sizeRangeCreateAsync.fulfilled, (state, action) => {
    //   state.sizeRanges.push(action.payload);
    //   state.loading = false;
    //   state.error = null;
    //   state.message = null;
    // })
    // .addCase(sizeRangeCreateAsync.rejected, (state, action) => {
    //   state.loading = false;
    //   if (action.payload) {
    //     state.error = action.payload as string;
    //   } else {
    //     state.error = 'Failed to create sizeRange';
    //   }
    //   state.message = null;
    // });
  }
});

export const { sizeRangeMessages } = sizeRangeSlice.actions;

export default sizeRangeSlice.reducer;